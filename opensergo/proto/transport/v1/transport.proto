// Copyright 2022, OpenSergo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package io.opensergo.proto.transport.v1;

option java_package = "io.opensergo.proto.transport.v1";
option java_outer_classname = "OpenSergoTransportProto";
option java_multiple_files = true;
option go_package = "github.com/opensergo/opensergo-control-plane/pkg/proto/transport/v1";

import "google/protobuf/any.proto";

// Common

message Status {
  int32 code = 1;
  string message = 2;
  repeated google.protobuf.Any details = 3;
}

enum SubscribeOpType {
  SUBSCRIBE = 0;
  UNSUBSCRIBE = 1;
}

// SubscribeRequest

message SubscribeLabelKV {
  string key = 1;
  string value = 2;
}

message SubscribeRequestTarget {
  string namespace = 1;
  string app = 2;
  repeated SubscribeLabelKV labels = 3;
  repeated string kinds = 4;
}

message SubscribeRequest {
  SubscribeRequestTarget target = 1;
  SubscribeOpType op_type = 2;

  string response_ack = 3;

  repeated google.protobuf.Any attachments = 4;

  // client-to-server response status
  Status status = 5;
  string identifier = 6;
  string request_id = 7;
}

message ControlPlaneDesc {
  string identifier = 1;
}

// SubscribeResponse

message SubscribeResponse {
  Status status = 1;

  string ack = 2;

  string namespace = 3;
  string app = 4;
  string kind = 5;
  DataWithVersion dataWithVersion = 6;

  ControlPlaneDesc control_plane = 7;
  string response_id = 8;
}

message DataWithVersion {
  repeated google.protobuf.Any data = 1;
  int64 version = 2;
}

// OpenSergo Universal Transport Service (state-of-the-world)
service OpenSergoUniversalTransportService {
  rpc SubscribeConfig(stream SubscribeRequest) returns (stream SubscribeResponse);
}
