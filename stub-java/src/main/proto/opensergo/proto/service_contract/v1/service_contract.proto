// Copyright 2022, OpenSergo Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opensergo.proto.service_contract.v1;

import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_package = "io.opensergo.proto.service_contract.v1";
option java_outer_classname = "ServiceContractProto";
option go_package = "github.com/opensergo/opensergo-go/proto/service_contract/v1";

// MetadataService report metadata
service MetadataService {
  // ReportMetadata report Metadata to server
  rpc ReportMetadata(ReportMetadataRequest) returns (ReportMetadataReply);
}

message ReportMetadataRequest {
  string app_name = 1;
  Node node = 2;

  repeated ServiceMetadata service_metadata = 3;
  reserved 4 to 16;
}

// Define services on same address and port
message ServiceMetadata {
  repeated SocketAddress listening_addresses = 1;
  repeated string protocols = 2;
  ServiceContract service_contract = 3;
}

message ReportMetadataReply { reserved 1 to 16; }

message ServiceContract {
  repeated ServiceDescriptor services = 1;
  repeated TypeDescriptor types = 2;
}

// Describes a service.
message ServiceDescriptor {
  string name = 1;
  repeated MethodDescriptor methods = 2;
  // description of this service
  optional string description = 3;
}

// Describes a method of a service.
message MethodDescriptor {
  string name = 1;

  // Input and output type names.  These are resolved in the same way as
  // FieldDescriptor.type_name, but must refer to a message type.
  repeated string input_types = 2;
  repeated string output_types = 3;

  // Identifies if client streams multiple client messages
  optional bool client_streaming = 5; // [default = false];
  // Identifies if server streams multiple server messages
  optional bool server_streaming = 6; // [default = false];

  // description of this method
  optional string description = 7;

  repeated string http_paths = 8;
  repeated string http_methods = 9;
}

message ServiceOptions {

  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  //   framework.  We apologize for hoarding these numbers to ourselves, but
  //   we were already using them long before we decided to release Protocol
  //   Buffers.

  // Is this service deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the service, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating services.
  optional bool deprecated = 33; // [default = false];

  // The parser stores options it doesn't recognize here. See above.
  repeated UninterpretedOption uninterpreted_option = 999;

  // Clients can define custom options in extensions of this message. See above.
  // extensions 1000 to max;
}

message MethodOptions {

  // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
  //   framework.  We apologize for hoarding these numbers to ourselves, but
  //   we were already using them long before we decided to release Protocol
  //   Buffers.

  // Is this method deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the method, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating methods.
  optional bool deprecated = 33; // [default = false];

  // The parser stores options it doesn't recognize here. See above.
  repeated UninterpretedOption uninterpreted_option = 999;

  // Clients can define custom options in extensions of this message. See above.
  // extensions 1000 to max;
}

// Describes a oneof.
message OneofDescriptorProto { optional string name = 1; }

// Describes a message type.
message TypeDescriptor {
  string name = 1;

  repeated FieldDescriptor fields = 2;

  optional MessageOptions options = 7;

  // Range of reserved tag numbers. Reserved tag numbers may not be used by
  // fields or extension ranges in the same message. Reserved ranges may
  // not overlap.
  message ReservedRange {
    optional int32 start = 1; // Inclusive.
    optional int32 end = 2;   // Exclusive.
  }
  repeated ReservedRange reserved_range = 9;
  // Reserved field names, which may not be used by fields in the same message.
  // A given name may only be reserved once.
  repeated string reserved_name = 10;
}

// Describes an enum type.
message EnumDescriptorProto {
  optional string name = 1;

  repeated EnumValueDescriptorProto value = 2;

  optional MessageOptions options = 3;
}

// Describes a value within an enum.
message EnumValueDescriptorProto {
  optional string name = 1;
  optional int32 number = 2;

  optional EnumValueOptions options = 3;
}

message EnumValueOptions {
  // Is this enum value deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the enum value, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating enum values.
  optional bool deprecated = 1; //[default = false];
}

message MessageOptions {
  // Is this message deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for the message, or it will be completely ignored; in the very least,
  // this is a formalization for deprecating messages.
  optional bool deprecated = 3; // [default = false];
}

// Describes a field within a message.
message FieldDescriptor {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // Order is weird for historical reasons.
    TYPE_DOUBLE = 1;
    TYPE_FLOAT = 2;
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
    // negative values are likely.
    TYPE_INT64 = 3;
    TYPE_UINT64 = 4;
    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
    // negative values are likely.
    TYPE_INT32 = 5;
    TYPE_FIXED64 = 6;
    TYPE_FIXED32 = 7;
    TYPE_BOOL = 8;
    TYPE_STRING = 9;
    // Tag-delimited aggregate.
    // Group type is deprecated and not supported in proto3. However, Proto3
    // implementations should still be able to parse the group wire format and
    // treat group fields as unknown fields.
    TYPE_GROUP = 10;
    TYPE_MESSAGE = 11; // Length-delimited aggregate.

    // New in version 2.
    TYPE_BYTES = 12;
    TYPE_UINT32 = 13;
    TYPE_ENUM = 14;
    TYPE_SFIXED32 = 15;
    TYPE_SFIXED64 = 16;
    TYPE_SINT32 = 17; // Uses ZigZag encoding.
    TYPE_SINT64 = 18; // Uses ZigZag encoding.
  }

  enum Label {
    // 0 is reserved for errors
    LABEL_UNSPECIFIED = 0;
    LABEL_OPTIONAL = 1;
    LABEL_REQUIRED = 2;
    LABEL_REPEATED = 3;
  }

  string name = 1;
  int32 number = 3;
  optional Label label = 4;

  // If type_name is set, this need not be set.  If both this and type_name
  // are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
  Type type = 5;

  // For message and enum types, this is the name of the type.  If the name
  // starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
  // rules are used to find the type (i.e. first the nested types within this
  // message are searched, then within the parent, on up to the root
  // namespace).
  optional string type_name = 6;

  // description of this field
  optional string description = 7;
}

message FieldOptions {
  // Is this field deprecated?
  // Depending on the target platform, this can emit Deprecated annotations
  // for accessors, or it will be completely ignored; in the very least, this
  // is a formalization for deprecating fields.
  optional bool deprecated = 3;

  // The parser stores options it doesn't recognize here. See above.
  repeated UninterpretedOption uninterpreted_option = 999;

  // Clients can define custom options in extensions of this message. See above.
  // extensions 1000 to max;
}

// Identifier metadata of the Node.
message Node {
  // Identifier that uniquely identifies a process within a VM/container.
  NodeIdentifier identifier = 1;
  // Locality specifying where the instance is running.
  optional Locality locality = 4;

  optional string tag = 5;
  optional string cluster = 6;
  optional string env = 7;
}

// Identifier that uniquely identifies a process within a VM/container.
message NodeIdentifier {

  // The host name. Usually refers to the machine/container name.
  // For example: os.Hostname() in Go, socket.gethostname() in Python.
  string host_name = 1;

  // Process id.
  uint32 pid = 2;

  // Start time of this ProcessIdentifier. Represented in epoch time.
  google.protobuf.Timestamp start_timestamp = 3;
}

message SocketAddress {

  // The address for this socket.
  // This address shouldn't be 0.0.0.0/127.0.0.1, because those cannot identity
  // or access from external
  string address = 1;

  uint32 port_value = 2;
}

// Identifies location of instance.
message Locality {
  // Region this instance belongs to.
  string region = 2;

  // Defines the local service zone where instance is running.
  string zone = 3;
}

// A message representing a option the parser does not recognize. This only
// appears in options protos created by the compiler::Parser class.
// DescriptorPool resolves these when building Descriptor objects. Therefore,
// options protos in descriptor objects (e.g. returned by Descriptor::options(),
// or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
// in them.
message UninterpretedOption {
  // The name of the uninterpreted option.  Each string represents a segment in
  // a dot-separated name.  is_extension is true iff a segment represents an
  // extension (denoted with parentheses in options specs in .proto files).
  // E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
  // "foo.(bar.baz).qux".
  message NamePart {
    string name_part = 1;
    bool is_extension = 2;
  }
  repeated NamePart name = 2;

  // The value of the uninterpreted option, in whatever type the tokenizer
  // identified it as during parsing. Exactly one of these should be set.
  optional string identifier_value = 3;
  optional uint64 positive_int_value = 4;
  optional int64 negative_int_value = 5;
  optional double double_value = 6;
  optional bytes string_value = 7;
  optional string aggregate_value = 8;
}
